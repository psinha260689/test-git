package oal.oracle.apps.fnd.qrtz.model.vo;

import java.sql.ResultSet;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

import oal.oracle.apps.fnd.qrtz.model.service.QuartzAMImpl;

import oracle.jbo.Row;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;


import oal.oracle.apps.fnd.qrtz.util.QuartzSchedulerSingleton;
import oal.oracle.apps.fnd.qrtz.util.ScheduledJob;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 02 02:50:15 PST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ScheduledJobsVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public ScheduledJobsVOImpl() {
    }
    
    /**
      * Overridden framework method.
      *
      * Wipe out all traces of a built-in query for this VO
      */
     protected void create() {
         getViewDef().setQuery(null);
         getViewDef().setSelectClause(null);
         setQuery(null);
     }

     @Override
     public void executeQuery() {
         getViewDef().setQuery(null);
         getViewDef().setSelectClause(null);
         setQuery(null);
         this.reset();
         this.clearCache();
         super.executeQuery();
     }

     /**
      * executeQueryForCollection - overridden for custom java data source support.
      */
     protected void executeQueryForCollection(Object qc, Object[] params,
                                              int noUserParams) {

         /*
          * Here we populate an iterator with data obtained using Quartz APIs.
          * This iterator will be used in createRowFromResultSet to 
          * programmatically create rows for the VO.
          */
         QuartzSchedulerSingleton quartzSchedulerSingleton = QuartzSchedulerSingleton.getInstance();
         List<ScheduledJob> scheduledJobs = quartzSchedulerSingleton.getScheduledJobs();
         List<ScheduledJob> allowedScheduledJobs = new ArrayList<ScheduledJob>();
         if (!scheduledJobs.isEmpty()) {
             // Store the iterator of the results on the collection such that it
             // can be accessed from createRowFromResultSet
             QuartzAMImpl am = (QuartzAMImpl) getApplicationModule();
             for(Iterator jobItr = scheduledJobs.iterator(); jobItr.hasNext();)
             {
                     ScheduledJob job = (ScheduledJob)jobItr.next();
                 if(am.isAccessAllowed(job.getScheduleNumber()))
                 {
                     allowedScheduledJobs.add(job);
                 }
                 }
             if(!allowedScheduledJobs.isEmpty())
             {
             ListIterator<ScheduledJob> jobsIterator = allowedScheduledJobs.listIterator();
             setUserDataForCollection(qc, jobsIterator);
             super.executeQueryForCollection(qc, params, noUserParams);
             }
         }

     }

     /**
      * hasNextForCollection - overridden for custom java data source support.
      */
     protected boolean hasNextForCollection(Object qc) {
         boolean result = false;

         ListIterator<ScheduledJob> scheduledJobs =
             (ListIterator<ScheduledJob>)getUserDataForCollection(qc);
         // Check if the iterator has more elements, if not indicate that the processing is complete
         result = scheduledJobs.hasNext();
         if (!result) {
             setFetchCompleteForCollection(qc, true);
         }

         return result;
     }

     /**
      * createRowFromResultSet - overridden for custom java data source support.
      */
     protected ViewRowImpl createRowFromResultSet(Object qc,
                                                  ResultSet resultSet) {

         // Get the iterator for scheduled jobs, this was populated in executeQueryForCollection
         ListIterator<ScheduledJob> scheduledJobs =
             (ListIterator<ScheduledJob>)getUserDataForCollection(qc);

         // Create new row for current entry in the collection
         ViewRowImpl row = createNewRowForCollection(qc);
         try {
             // Populate the data of the row from the data obtained from Quartz APIs
             ScheduledJob scheduledJob = scheduledJobs.next();
             String scheduleNumber = scheduledJob.getScheduleNumber();
             int jobId = Integer.parseInt(scheduleNumber.substring(0,scheduleNumber.indexOf(".")));
             row.setAttribute("ScheduleNumber", scheduleNumber);
             row.setAttribute("GroupName", scheduledJob.getGroupName());
             Date nextExe = scheduledJob.getNextExecution();
             if(nextExe != null)
              row.setAttribute("NextExecution", new Timestamp(nextExe));
             row.setAttribute("JobClass", scheduledJob.getJobClass());
             row.setAttribute("JobName", ((QuartzAMImpl)getApplicationModule()).getJobName(jobId));
             row.setAttribute("JobStatus", scheduledJob.getJobStatus());
         } catch (Exception e) {
             e.printStackTrace();
         }
         return row;
     }

     /**
      * getQueryHitCount - overridden for custom java data source support.
      * This is not implemented at the moment
      */
     public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
         // Not implemented at the moment
         return 0;
     }
     public void removeCurrentRow() {
         Row row = this.getCurrentRow();
         String scheduleNumber = (String)row.getAttribute("ScheduleNumber");
         String groupName = (String)row.getAttribute("GroupName");
         QuartzSchedulerSingleton quartzSchedulerSingleton = QuartzSchedulerSingleton.getInstance();
         quartzSchedulerSingleton.deleteScheduledJob(scheduleNumber, groupName);
         super.removeCurrentRow();
     }

    /**
     * Returns the variable value for pJobName.
     * @return variable value for pJobName
     */
    public String getpJobName() {
        return (String)ensureVariableManager().getVariableValue("pJobName");
    }

    /**
     * Sets <code>value</code> for variable pJobName.
     * @param value value to bind as pJobName
     */
    public void setpJobName(String value) {
        ensureVariableManager().setVariableValue("pJobName", value);
    }

    /**
     * Returns the variable value for pReqNumber.
     * @return variable value for pReqNumber
     */
    public String getpReqNumber() {
        return (String)ensureVariableManager().getVariableValue("pReqNumber");
    }

    /**
     * Sets <code>value</code> for variable pReqNumber.
     * @param value value to bind as pReqNumber
     */
    public void setpReqNumber(String value) {
        ensureVariableManager().setVariableValue("pReqNumber", value);
    }

    /**
     * Returns the variable value for pScheduleNumber.
     * @return variable value for pScheduleNumber
     */
    public String getpScheduleNumber() {
        return (String)ensureVariableManager().getVariableValue("pScheduleNumber");
    }

    /**
     * Sets <code>value</code> for variable pScheduleNumber.
     * @param value value to bind as pScheduleNumber
     */
    public void setpScheduleNumber(String value) {
        ensureVariableManager().setVariableValue("pScheduleNumber", value);
    }
}
